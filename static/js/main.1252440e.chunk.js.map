{"version":3,"sources":["util/Spotify.js","components/SearchBar/SearchBar.js","components/Track/Track.js","components/TrackList/TrackList.js","components/SearchResults/SearchResults.js","components/Playlist/Playlist.js","components/App/App.js","reportWebVitals.js","index.js"],"names":["accessToken","SearchBar","props","state","term","search","bind","handleTermChange","event","this","onSearch","preventDefault","setState","target","value","className","onChange","placeholder","onClick","React","Component","Track","addTrack","removeTrack","isRemoval","onAdd","track","onRemove","name","artist","album","renderAction","TrackList","trackList","map","id","SearchResults","searchResults","Playlist","handleNameChange","onNameChange","playlistName","playlistTracks","onSave","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","process","fetch","headers","Authorization","then","response","json","jsonResponse","tracks","items","artists","uri","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","response_1","jsonResponse_1","playlistId","uris","App","updatePlaylistName","newTrack","list","find","savedTrack","push","filter","currentTrack","listName","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0PAEIA,E,kFCgCWC,G,8DA7BX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,KAAM,IAGV,EAAKC,OAAS,EAAKA,OAAOC,KAAZ,gBACd,EAAKC,iBAAmB,EAAKA,iBAAiBD,KAAtB,gBAPT,E,mDAUZE,GACHC,KAAKP,MAAMQ,SAASD,KAAKN,MAAMC,MAC/BI,EAAMG,mB,uCAGOH,GACbC,KAAKG,SAAS,CAACR,KAAMI,EAAMK,OAAOC,U,+BAIlC,OACI,sBAAKC,UAAU,YAAf,UACI,uBAAOC,SAAUP,KAAKF,iBAAkBU,YAAY,mCACpD,wBAAQF,UAAU,eAAeG,QAAST,KAAKJ,OAA/C,2B,GAxBQc,IAAMC,YCoCfC,G,oEApCX,WAAYnB,GAAQ,IAAD,8BACf,cAAMA,IACDoB,SAAW,EAAKA,SAAShB,KAAd,gBAChB,EAAKiB,YAAc,EAAKA,YAAYjB,KAAjB,gBAHJ,E,2DAQlB,OAAIG,KAAKP,MAAMsB,UACL,wBAAQT,UAAU,eAAeG,QAAST,KAAKc,YAA/C,eAEI,wBAAQR,UAAU,eAAeG,QAAST,KAAKa,SAA/C,iB,iCAKXb,KAAKP,MAAMuB,MAAMhB,KAAKP,MAAMwB,S,oCAI5BjB,KAAKP,MAAMyB,SAASlB,KAAKP,MAAMwB,S,+BAI/B,OACI,sBAAKX,UAAU,QAAf,UACI,sBAAKA,UAAU,oBAAf,UACI,mCAAMN,KAAKP,MAAMwB,MAAME,KAAvB,OACA,mCAAMnB,KAAKP,MAAMwB,MAAMG,OAAvB,MAAkCpB,KAAKP,MAAMwB,MAAMI,MAAnD,UAEHrB,KAAKsB,sB,GA/BFZ,IAAMC,YCeXY,E,uKAbD,IAAD,OACP,OACE,qBAAKjB,UAAU,YAAf,SAEIN,KAAKP,MAAM+B,UAAUC,KAAK,SAAAR,GACtB,OAAO,cAAC,EAAD,CAAOA,MAAOA,EAAsBD,MAAO,EAAKvB,MAAMuB,MAAOE,SAAU,EAAKzB,MAAMyB,SAAUH,UAAW,EAAKtB,MAAMsB,WAAxFE,EAAMS,a,GAN/BhB,IAAMC,WCWfgB,E,uKATP,OACI,sBAAKrB,UAAU,gBAAf,UACI,yCACA,cAAC,EAAD,CAAWkB,UAAWxB,KAAKP,MAAMmC,cAAeZ,MAAOhB,KAAKP,MAAMuB,MAAOD,WAAW,W,GALxEL,IAAMC,WC0BnBkB,G,wDAxBX,WAAYpC,GAAQ,IAAD,8BACf,cAAMA,IACDqC,iBAAmB,EAAKA,iBAAiBjC,KAAtB,gBAFT,E,6DAIDE,GACdC,KAAKP,MAAMsC,aAAahC,EAAMK,OAAOC,S,+BAGrC,OACI,sBAAKC,UAAU,WAAf,UACI,uBACID,MAAOL,KAAKP,MAAMuC,aAClBzB,SAAUP,KAAK8B,mBACnB,cAAC,EAAD,CACIN,UAAWxB,KAAKP,MAAMwC,eACtBf,SAAUlB,KAAKP,MAAMyB,SACrBH,WAAW,IACf,wBACIT,UAAU,gBACVG,QAAST,KAAKP,MAAMyC,OAFxB,oC,GAlBOxB,IAAMC,Y,wBLDvBwB,EAAU,CACdC,eADc,WAEZ,GAAI7C,EACF,OAAOA,EAGT,IAAM8C,EAAmBC,OAAOC,SAASC,KAAKC,MAAM,wBAC9CC,EAAiBJ,OAAOC,SAASC,KAAKC,MAAM,sBAClD,GAAIJ,GAAoBK,EAAgB,CACtCnD,EAAc8C,EAAiB,GAC/B,IAAMM,EAAYC,OAAOF,EAAe,IAGxC,OAFAJ,OAAOO,YAAW,kBAAMtD,EAAc,KAAgB,IAAZoD,GAC1CL,OAAOQ,QAAQC,UAAU,eAAgB,KAAM,KACxCxD,EAEP,IAAMyD,EAAS,2DAnBJC,mCAmBI,0EAlBD,sCAmBdX,OAAOC,SAAWS,GAItBpD,OApBc,SAoBPD,GACL,IAAMJ,EAAc4C,EAAQC,iBAC5B,OAAOc,MAAM,kDAAD,OAAmDvD,GAAQ,CACrEwD,QAAS,CACPC,cAAc,UAAD,OAAY7D,MAE1B8D,MAAK,SAAAC,GACN,OAAOA,EAASC,UACfF,MAAK,SAAAG,GACN,OAAKA,EAAaC,OAGXD,EAAaC,OAAOC,MAAMjC,KAAI,SAAAR,GAAK,MAAK,CAC7CS,GAAIT,EAAMS,GACVP,KAAMF,EAAME,KACZC,OAAQH,EAAM0C,QAAQ,GAAGxC,KACzBE,MAAOJ,EAAMI,MAAMF,KACnByC,IAAK3C,EAAM2C,QAPJ,OAaPC,aA3CQ,SA2CK1C,EAAM2C,GAAY,OAAD,2HAC7B3C,GAAS2C,EAAUC,OADU,wDAK5BxE,EAAc4C,EAAQC,iBACtBe,EAAU,CAAEC,cAAc,UAAD,OAAY7D,IANT,SASX2D,MAAM,gCAAiC,CAAEC,QAASA,IATvC,cAS5BG,EAT4B,gBAWLA,EAASC,OAXJ,cAW1BC,EAX0B,OAYhCQ,EAASR,EAAa9B,GAZU,UAaPwB,MAAM,oCAAD,OAAqCc,EAArC,cAAyD,CACnFb,QAASA,EACTc,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAAEjD,KAAMA,MAhBD,eAa1BkD,EAb0B,iBAkBHA,EAAWd,OAlBR,eAkB1Be,EAlB0B,OAmB1BC,EAAaD,EAAe5C,GAnBF,UAoBnBwB,MAAM,oCAAD,OAAqCc,EAArC,sBAAyDO,EAAzD,WAA8E,CAC5FpB,QAASA,EACTc,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAAEI,KAAMV,MAvBD,yFA4BvB3B,IMWAsC,E,kDA7Eb,WAAYhF,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXkC,cAAe,GACfK,eAAgB,GAChBD,aAAc,wBAEhB,EAAKnB,SAAW,EAAKA,SAAShB,KAAd,gBAChB,EAAKiB,YAAc,EAAKA,YAAYjB,KAAjB,gBACnB,EAAK6E,mBAAqB,EAAKA,mBAAmB7E,KAAxB,gBAC1B,EAAKgE,aAAe,EAAKA,aAAahE,KAAlB,gBACpB,EAAKD,OAAS,EAAKA,OAAOC,KAAZ,gBAXG,E,mDAcZF,GAAO,IAAD,OACXwC,EAAQvC,OAAOD,GAAM0D,MAAM,SAAAzB,GACzB,EAAKzB,SAAS,CAACyB,cAAeA,S,+BAIxB+C,GACR,IAAIC,EAAO5E,KAAKN,MAAMuC,eAClB2C,EAAKC,MAAK,SAAAC,GAAU,OAAIA,EAAWpD,KAAOiD,EAASjD,QAGvDkD,EAAKG,KAAKJ,GACV3E,KAAKG,SACH,CAAC8B,eAAgB2C,O,kCAIT3D,GACV,IAAI2D,EAAO5E,KAAKN,MAAMuC,eACtB2C,EAAOA,EAAKI,QAAQ,SAAAC,GAAY,OAAIA,EAAavD,KAAOT,EAAMS,MAC9D1B,KAAKG,SACH,CAAC8B,eAAgB2C,M,yCAIDzD,GAClBnB,KAAKG,SAAS,CAAC6B,aAAcb,M,qCAIf,IAAD,OACH2C,EAAY9D,KAAKN,MAAMuC,eAAeR,KAAI,SAAAR,GAAK,OAAIA,EAAM2C,OACzDsB,EAAWlF,KAAKN,MAAMsC,aAC5BG,EAAQ0B,aAAaqB,EAAUpB,GAAWT,MAAK,WAC7C,EAAKlD,SAAS,CACZ6B,aAAc,sBACdC,eAAgB,U,+BAMxB,OACE,gCACI,oCAAM,sBAAM3B,UAAU,YAAhB,iBAAN,SACA,sBAAKA,UAAU,MAAf,UACI,cAAC,EAAD,CAAWL,SAAUD,KAAKJ,SAC1B,sBAAKU,UAAU,eAAf,UACA,cAAC,EAAD,CACEsB,cAAe5B,KAAKN,MAAMkC,cAC1BZ,MAAOhB,KAAKa,WACd,cAAC,EAAD,CACEoB,eAAgBjC,KAAKN,MAAMuC,eAC3BD,aAAchC,KAAKN,MAAMsC,aACzBd,SAAUlB,KAAKc,YACfiB,aAAc/B,KAAK0E,mBACnBxC,OAAQlC,KAAK6D,4B,GAvEXnD,IAAMC,WCITwE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhC,MAAK,YAAkD,IAA/CiC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.1252440e.chunk.js","sourcesContent":["const clientId = process.env.REACT_APP_API_KEY; \r\nconst redirectUri = 'https://ti-co.github.io/music-app/'; // must match Spotify redirect URIs on the Spotify API settings.\r\nlet accessToken;\r\n\r\nconst Spotify = {\r\n  getAccessToken() {\r\n    if (accessToken) {\r\n      return accessToken;\r\n    }\r\n\r\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n    if (accessTokenMatch && expiresInMatch) {\r\n      accessToken = accessTokenMatch[1];\r\n      const expiresIn = Number(expiresInMatch[1]);\r\n      window.setTimeout(() => accessToken = '', expiresIn * 1000);\r\n      window.history.pushState('Access Token', null, '/'); // This clears the parameters, allowing us to grab a new access token when it expires.\r\n      return accessToken;\r\n    } else {\r\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\r\n      window.location = accessUrl;\r\n    }\r\n  },\r\n\r\n  search(term) {\r\n    const accessToken = Spotify.getAccessToken();\r\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\r\n      headers: {\r\n        Authorization: `Bearer ${accessToken}`\r\n      }\r\n    }).then(response => {\r\n      return response.json();\r\n    }).then(jsonResponse => {\r\n      if (!jsonResponse.tracks) {\r\n        return [];\r\n      }\r\n      return jsonResponse.tracks.items.map(track => ({\r\n        id: track.id,\r\n        name: track.name,\r\n        artist: track.artists[0].name,\r\n        album: track.album.name,\r\n        uri: track.uri\r\n      }));\r\n    });\r\n  },\r\n\r\n  // had to use async for function to work in\r\n  async savePlaylist(name, trackUris) { \r\n    if (!name || !trackUris.length) {\r\n      return;\r\n    }\r\n\r\n    const accessToken = Spotify.getAccessToken();\r\n    const headers = { Authorization: `Bearer ${accessToken}` };\r\n    let userId;\r\n\r\n    const response = await fetch('https://api.spotify.com/v1/me', { headers: headers }\r\n      );\r\n      const jsonResponse = await response.json();\r\n      userId = jsonResponse.id;\r\n      const response_1 = await fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\r\n          headers: headers,\r\n          method: 'POST',\r\n          body: JSON.stringify({ name: name })\r\n      });\r\n      const jsonResponse_1 = await response_1.json();\r\n      const playlistId = jsonResponse_1.id;\r\n      return await fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\r\n          headers: headers,\r\n          method: 'POST',\r\n          body: JSON.stringify({ uris: trackUris })\r\n      });\r\n  }\r\n};\r\n\r\nexport default Spotify;\r\n","import React from 'react';\r\nimport './SearchBar.css';\r\n\r\n\r\nclass SearchBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            term: ''\r\n        };\r\n            \r\n        this.search = this.search.bind(this);\r\n        this.handleTermChange = this.handleTermChange.bind(this);\r\n    }\r\n      \r\n    search(event){\r\n        this.props.onSearch(this.state.term);\r\n        event.preventDefault();\r\n    }\r\n\r\n    handleTermChange(event) {\r\n        this.setState({term: event.target.value});         \r\n    }\r\n    \r\n    render () {\r\n        return (\r\n            <div className=\"SearchBar\">\r\n                <input onChange={this.handleTermChange} placeholder=\"Enter A Song, Album, or Artist\" />\r\n                <button className=\"SearchButton\" onClick={this.search} >SEARCH</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchBar","import React from 'react';\r\nimport './Track.css';\r\n\r\nclass Track extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.addTrack = this.addTrack.bind(this);\r\n        this.removeTrack = this.removeTrack.bind(this);\r\n    }\r\n    \r\n    \r\n    renderAction() {\r\n     if (this.props.isRemoval) {\r\n        return <button className=\"Track-action\" onClick={this.removeTrack} >-</button>\r\n        } else {\r\n            return <button className=\"Track-action\" onClick={this.addTrack}>+</button>\r\n            }\r\n    }\r\n    \r\n    addTrack() {\r\n        this.props.onAdd(this.props.track);\r\n    }\r\n    \r\n    removeTrack() {\r\n        this.props.onRemove(this.props.track);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Track\">\r\n                <div className=\"Track-information\">\r\n                    <h3> {this.props.track.name} </h3>\r\n                    <p>  {this.props.track.artist} | {this.props.track.album} </p>\r\n                </div>\r\n                {this.renderAction()} \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Track ;","import React from 'react';\r\nimport './TrackList.css';\r\nimport Track from '../Track/Track';\r\n\r\nclass TrackList extends React.Component {\r\n    render() {\r\n      return (\r\n        <div className=\"trackList\">\r\n         {\r\n            this.props.trackList.map( track => {\r\n                return <Track track={track} key={track.id} onAdd={this.props.onAdd} onRemove={this.props.onRemove} isRemoval={this.props.isRemoval} /> \r\n            })\r\n          }\r\n        </div>\r\n      )    \r\n    }\r\n}\r\n\r\nexport default TrackList; ","import React from 'react';\r\nimport './SearchResults.css';\r\nimport TrackList from '../TrackList/TrackList';\r\n\r\nclass SearchResults extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"SearchResults\">\r\n                <h2>Results</h2>\r\n                <TrackList trackList={this.props.searchResults} onAdd={this.props.onAdd} isRemoval={false}  />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchResults ; ","import React from 'react';\r\nimport './Playlist.css';\r\nimport TrackList from '../TrackList/TrackList';\r\n\r\n\r\nclass Playlist extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleNameChange = this.handleNameChange.bind(this);\r\n    }\r\n    handleNameChange (event) {\r\n        this.props.onNameChange(event.target.value);\r\n    }\r\n    render () {\r\n        return (\r\n            <div className=\"Playlist\">\r\n                <input \r\n                    value={this.props.playlistName} \r\n                    onChange={this.handleNameChange} />\r\n                <TrackList \r\n                    trackList={this.props.playlistTracks} \r\n                    onRemove={this.props.onRemove} \r\n                    isRemoval={true} />\r\n                <button \r\n                    className=\"Playlist-save\"\r\n                    onClick={this.props.onSave} >SAVE TO SPOTIFY</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Playlist;","import React from 'react'\r\nimport './App.css';\r\nimport SearchBar from '../SearchBar/SearchBar'; \r\nimport SearchResults from '../SearchResults/SearchResults';\r\nimport Playlist from '../Playlist/Playlist';\r\nimport Spotify from '../../util/Spotify';\r\n\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      searchResults: [],\r\n      playlistTracks: [],\r\n      playlistName: 'Save playlist as....'\r\n    };\r\n    this.addTrack = this.addTrack.bind(this);\r\n    this.removeTrack = this.removeTrack.bind(this);\r\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\r\n    this.savePlaylist = this.savePlaylist.bind(this);\r\n    this.search = this.search.bind(this);\r\n  }\r\n\r\n  search(term) {\r\n    Spotify.search(term).then( searchResults => {\r\n      this.setState({searchResults: searchResults});\r\n    });\r\n  }\r\n\r\n  addTrack (newTrack) {\r\n    let list = this.state.playlistTracks;\r\n    if (list.find(savedTrack => savedTrack.id === newTrack.id)) {\r\n      return;\r\n    }\r\n    list.push(newTrack); \r\n    this.setState(\r\n      {playlistTracks: list}\r\n      );  \r\n  }\r\n\r\n  removeTrack(track) {\r\n    let list = this.state.playlistTracks; \r\n    list = list.filter( currentTrack => currentTrack.id !== track.id )\r\n    this.setState(\r\n      {playlistTracks: list}\r\n      );\r\n  }\r\n\r\n  updatePlaylistName (name) {\r\n    this.setState({playlistName: name});\r\n  }\r\n\r\n  \r\n  savePlaylist() {\r\n        const trackUris = this.state.playlistTracks.map(track => track.uri);\r\n        const listName = this.state.playlistName;\r\n        Spotify.savePlaylist(listName, trackUris).then(() => {\r\n          this.setState({\r\n            playlistName: 'Save playlist as...',\r\n            playlistTracks: []\r\n          });\r\n        });\r\n      }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n          <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\r\n          <div className=\"App\">\r\n              <SearchBar onSearch={this.search} />\r\n              <div className=\"App-playlist\">\r\n              <SearchResults \r\n                searchResults={this.state.searchResults} \r\n                onAdd={this.addTrack} />\r\n              <Playlist \r\n                playlistTracks={this.state.playlistTracks} \r\n                playlistName={this.state.playlistName} \r\n                onRemove={this.removeTrack} \r\n                onNameChange={this.updatePlaylistName} \r\n                onSave={this.savePlaylist} />\r\n              </div>\r\n          </div>\r\n      </div>\r\n    );\r\n  }  \r\n}\r\nexport default App;\r\n\r\n\r\n\r\n\r\n\r\n\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}